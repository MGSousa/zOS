#!/bin/bash

# shellcheck disable=SC2086

if [ "$(id -u)" = 0 ]; then
    echo "###### zOS ######"
    echo "This script MUST NOT be run as root user since it makes changes"
    echo "to the \$HOME directory of the \$USER executing this script."
    echo "The \$HOME directory of the root user is, of course, '/root'."
    echo "We don't want to mess around in there. So run this script as a"
    echo "normal user. You will be asked for a sudo password when necessary."
    exit 1
fi

set -eo pipefail

# set new tmp directory
TMP_DIR=$(mktemp -d) && trap "rm -rf ${TMP_DIR}" EXIT
cd "${TMP_DIR}"

# TODO: for now not used - trap for prefixes on stdOut and stdErr
set_trap() {
    exec > >(trap "" INT TERM; sed 's/^/zorix: /')
    exec 2> >(trap "" INT TERM; sed 's/^/zorix: (error) /' >&2)
}

set_input() {
    printf "\n"
    echo "::::::::::::::::"
    echo "::::: zOS ::::::"
    echo "################"
    echo " -  Asked: '$1'"
	
    # check if is not running in a terminal
    if [ ! -t 0 ]; then
	echo " -- not a tty: automatic accepted"
        return 0;
    fi;
	
    command -v dialog 1>/dev/null
    DL_STATUS=$?
    if (( DL_STATUS == 1 )); then
        PS3=$1
	CHOICE=("Yes" "No")
        select result in "${CHOICE[@]}"; do
    	    case $result in
                Yes | No)
   		    echo "Choosed $result"
            	    return 0
            	;;
         	*)
            	    echo "invalid option $result"
		    break
            	;;
            esac
	done
    else
        dialog --keep-tite --colors --title "Zorix OS " --yes-label "Yes" --no-label "No" --yesno "$1" 9 60
    fi;
}

install_dotfiles() {
    set_input "Do you want install custom dotfiles?" || return 0;

    CFGS="./zos_configs"
    git clone "https://mgs_props@bitbucket.org/mgs_props/configs.git" $CFGS
    shopt -s dotglob        
    rm -rf $CFGS/README.md $CFGS/.git && cp -r $CFGS/* ~/ && rm -rf "$CFGS"

    # set HOME on xmobarrc
    sed -i "s|\$HOME|$HOME|" ~/.xmobar/xmobarrc && sed -i "s|\$HOME|$HOME|" ~/.xmobar/xmobarrc_bat
}

install_term() {
    set_input "Do you want to install Alacritty?" || return 0;

    TAG_NAME=$(curl -sSLH "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/barnumbirr/alacritty-debian/releases?page=1&per_page=1" | jq -r ".[].tag_name")
    wget -nv https://github.com/barnumbirr/alacritty-debian/releases/download/${TAG_NAME}/alacritty_${TAG_NAME/v/""}_amd64_bullseye.deb -O alacritty && sudo dpkg -i alacritty
}

install_mcfly() {	
    set_input "Do you want install pkg mcfly for smart search history?" || return 0;

    AVAILABLE_SHELLS=$(tail -n +3 < /etc/shells)
    WD_SHELLS=('bash' 'zsh' 'fish')

    TAG=$(curl -w "%{url_effective}" -sSLI https://github.com/cantino/mcfly/releases/latest -o /dev/null | awk -F'v' '{print $2}')
    curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sudo sh -s -- --git cantino/mcfly --tag "v$TAG" --force || return 1
        
    for shell in $AVAILABLE_SHELLS; do
        CSH=$(echo "$shell" | tac -s'/' | head -1)

        for k in "${!WD_SHELLS[@]}"; do

            if [ "$CSH" = "${WD_SHELLS[k]}" ]; then
                if [ "$CSH" = "fish" ]; then
                    echo -n "mcfly init $CSH | source" >> ~/.config/fish/config.fish
                else
                    # shellcheck disable=SC2016
                    echo -n 'eval "$(mcfly init '$CSH')"' >> ~/."$CSH"rc
                fi;
                unset 'WD_SHELLS[k]'
            fi;
        done;
    done
}

install_nvim() {
    # install Vim Plugin Manager
    curl -sSfLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

    # install nvim with custom profile
    set_input "Install custom nvim profile?" || return 0;
    git clone --depth=1 https://github.com/MGSousa/nvimrc.git ~/.vim && \
    sh ~/.vim/install.sh && \
    nvim +PlugInstall
}

# check if current system has X server installed and enabled
if ! timeout 1s xset q &>/dev/null; then
    set_input "No X server available at \$DISPLAY [$DISPLAY]!\n Do you want to proceed, even so?" || (echo "Exited!" && exit 1)
fi

RELEASE="/etc/*-release"
OSS=$( (grep ID_LIKE ${RELEASE} || grep ID ${RELEASE}) | awk -F= '{print $2}' | tr -d '"')

# install base deps
# filter each OS like text
osarr=($OS)
eachOs=${#osarr[@]}
for OS in $OSS; do
    case "$OS" in
        arch)
    	    sudo pacman -Sy && \
            sudo pacman --noconfirm -Sy zip git htop xmonad alacritty dmenu xdotool xmobar network-manager-applet lxsession libvirt libnotify dunst xcompmgr neofetch xwallpaper neovim shellcheck dialog fd ripgrep shellcheck
    
            # install dmscripts
            yay -S dmscripts-git
	    break
        ;;
        ubuntu|debian)
            sudo apt update && \
            sudo apt install -y zip git htop xmonad libxpm-dev xdotool suckless-tools dunst libnotify-bin lxsession xcompmgr neofetch xwallpaper neovim shellcheck dialog fd-find ripgrep cabal-install shellcheck
    
            # install dmscripts
            git clone https://gitlab.com/dwt1/dmscripts.git && cd dmscripts
            sudo make clean build && sudo make install
    
            # install Fast Node Manager package
            command -v fnm &>/dev/null || curl -fsSL https://fnm.vercel.app/install | bash
    
            # choose to install alacritty stable version
            install_term

            # check if xmobar is already compiled
            XMOBAR_VERSION=$(cabal list xmobar | head -4 | tail -1 | awk -F':' '{print $2}')
            if [ -z "$XMOBAR_VERSION" ]; then
	        # choose to install xmobar
	        set_input "Do you want to install xmobar?" && \

                # install cabal utilities
                cabal update && cabal install xmobar --flags="with_inotify with_xpm with_xft" && \
                sudo ln -s /home/ms/.cabal/bin/xmobar /usr/local/bin/xmobar
            fi;
	    break
        ;;
        *)
	    eachOs=$((eachOs - 1))
	    if (( eachOs == 0 )); then
                echo "This distribution [$OS] is not supported!"
                exit 1
	    fi;
    esac
done

# choose to install dotfiles
install_dotfiles
sleep 1

# choose to install mcfly package for smart shell history manager
install_mcfly
sleep 1

# choose to install custom nvim profile
install_nvim
sleep 1

# choose to restart OS
set_input "Installation successfull !!\n Do you want to reboot now?" && reboot;
